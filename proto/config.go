// Iris - Distributed Messaging Framework
// Copyright 2013 Peter Szilagyi. All rights reserved.
//
// Iris is dual licensed: you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.
//
// The framework is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//
// Alternatively, the Iris framework may be used in accordance with the terms
// and conditions contained in a signed written agreement between you and the
// author(s).
//
// Author: peterke@gmail.com (Peter Szilagyi)
package session

import (
	"crypto"
	"crypto/aes"
	"math/big"
	"crypto/md5"
)

// Cyclic group for the STS cryptography (2248 bits)
var stsGroup = new(big.Int).SetBytes([]byte{
	0xaa, 0x26, 0xaa, 0x7c, 0xc7, 0x88, 0x60, 0x72,
	0xea, 0x16, 0x8c, 0xcd, 0xdd, 0x36, 0x68, 0x0b,
	0xfa, 0xb6, 0x04, 0x90, 0x0f, 0x59, 0xf4, 0xac,
	0xac, 0x3b, 0x96, 0x26, 0xfe, 0x10, 0x40, 0x21,
	0x1d, 0xa3, 0x54, 0xcd, 0x7a, 0x88, 0x9c, 0x9c,
	0x87, 0xc3, 0x84, 0x0e, 0xec, 0xfc, 0xa5, 0x13,
	0xfa, 0xe9, 0x51, 0x25, 0x0a, 0xb9, 0xf5, 0x74,
	0xfb, 0x72, 0xde, 0xc8, 0x84, 0x9f, 0xec, 0x99,
	0x5a, 0x47, 0xf2, 0x81, 0x29, 0x22, 0xb5, 0x38,
	0x5b, 0xeb, 0x2e, 0x87, 0x89, 0x39, 0x1a, 0x60,
	0xf6, 0xf4, 0x67, 0x9b, 0xf9, 0xf4, 0xd5, 0x93,
	0x90, 0x79, 0xed, 0x2c, 0x25, 0x7a, 0x64, 0xb8,
	0x75, 0xdb, 0x10, 0x25, 0xcf, 0x97, 0x90, 0xd0,
	0xa7, 0xb3, 0x75, 0xd1, 0x74, 0xad, 0xe1, 0x9b,
	0xa4, 0xfd, 0x94, 0x58, 0xf0, 0x2d, 0xab, 0xdc,
	0x55, 0x43, 0x92, 0xf9, 0x53, 0x50, 0x59, 0x3c,
	0x6d, 0x5e, 0xe5, 0xf7, 0x77, 0xb0, 0x8c, 0xd2,
	0x7a, 0x9b, 0xa9, 0x86, 0xbf, 0x6e, 0xc5, 0xb5,
	0x89, 0xd3, 0xe1, 0x8d, 0x51, 0xf0, 0x7a, 0xc3,
	0xac, 0xd2, 0x68, 0xb0, 0x9e, 0x5b, 0xc4, 0x23,
	0xb1, 0x56, 0x2f, 0x94, 0x24, 0xe2, 0xf7, 0x99,
	0x6c, 0x42, 0x11, 0xa7, 0x64, 0x64, 0x82, 0x8a,
	0xa8, 0x8e, 0xd3, 0xb9, 0xad, 0x82, 0x19, 0x2f,
	0xdb, 0xb2, 0x31, 0xe9, 0xa7, 0x49, 0x83, 0xa3,
	0x65, 0xe5, 0x94, 0x05, 0xfb, 0x8d, 0x02, 0xbb,
	0x02, 0xc6, 0x58, 0x4e, 0xef, 0x17, 0x96, 0xb8,
	0x90, 0xbf, 0x37, 0xba, 0x11, 0xdb, 0xdf, 0xa4,
	0x8c, 0x6f, 0xd1, 0xae, 0x5b, 0x8c, 0xc6, 0x5b,
	0xca, 0x90, 0xde, 0x57, 0x6c, 0x74, 0xac, 0x1d,
	0xf7, 0x72, 0x43, 0xe5, 0xc5, 0xdf, 0xff, 0xe4,
	0xbb, 0x57, 0x51, 0xb3, 0xa9, 0x90, 0x04, 0xbe,
	0xa0, 0xd8, 0xf1, 0xd2, 0x4f, 0x0d, 0x79, 0x90,
	0x3a, 0xfb, 0xa6, 0x41, 0xed, 0x9b, 0x96, 0x7a,
	0xe3, 0x22, 0x11, 0x86, 0x7e, 0x91, 0xe9, 0x71,
	0x3f, 0xfe, 0x8f, 0xa1, 0x4d, 0x12, 0x7a, 0x65,
})

// Cyclic group generator for the STS cryptography (2248 bits)
var stsGenerator = new(big.Int).SetBytes([]byte{
	0x4f, 0x9d, 0xdc, 0x27, 0x70, 0xc9, 0xd9, 0x14,
	0x31, 0x0c, 0xf6, 0x12, 0xce, 0xbd, 0xa5, 0x8f,
	0x9d, 0x3f, 0xa3, 0x5a, 0x86, 0xbf, 0x20, 0x81,
	0x6b, 0x56, 0x9e, 0x4e, 0x78, 0x42, 0xd8, 0x94,
	0x29, 0xc0, 0x4a, 0xd2, 0xef, 0xd7, 0xae, 0x3b,
	0x3a, 0x7e, 0xe0, 0xce, 0xe1, 0x49, 0x45, 0xd6,
	0x16, 0xbb, 0xec, 0x85, 0x47, 0xe3, 0x90, 0x45,
	0xe1, 0x0c, 0x73, 0x43, 0xba, 0x39, 0x40, 0x1a,
	0x4a, 0x75, 0x1e, 0xa1, 0xc6, 0xf6, 0xf3, 0x7a,
	0x9a, 0x51, 0xd4, 0x05, 0x46, 0x1f, 0x47, 0x18,
	0x0b, 0x25, 0xf2, 0xf1, 0x30, 0x21, 0x2a, 0x7b,
	0x6e, 0x53, 0x3a, 0xbd, 0xbd, 0xe6, 0xdb, 0xd0,
	0xb0, 0x9d, 0x71, 0xbf, 0x4a, 0xa6, 0x4e, 0xe1,
	0xeb, 0xd6, 0xf3, 0x71, 0xf1, 0x91, 0xc3, 0x90,
	0xb1, 0x1d, 0xdc, 0x77, 0xab, 0x9a, 0x1b, 0x35,
	0xc3, 0x61, 0x53, 0xa1, 0x27, 0xb9, 0xe6, 0x43,
	0x45, 0xdf, 0x1d, 0x7d, 0xf8, 0x0b, 0xc2, 0x68,
	0xf0, 0xe9, 0xf9, 0xc0, 0xdb, 0x92, 0x58, 0xbd,
	0xff, 0xd8, 0x7c, 0x7d, 0x56, 0x02, 0x94, 0x6a,
	0x39, 0xbf, 0x7b, 0x4b, 0xc4, 0x84, 0x1c, 0xe3,
	0xa2, 0x6a, 0xbe, 0xdb, 0xe8, 0x48, 0xb6, 0x9a,
	0xd9, 0x8f, 0x12, 0xbf, 0xb2, 0x1c, 0x01, 0x25,
	0xc3, 0x3b, 0x9f, 0xaa, 0x15, 0x86, 0xed, 0x74,
	0xb6, 0xa4, 0x63, 0xe1, 0x2a, 0xe8, 0xbb, 0x8b,
	0xc4, 0x11, 0xa3, 0x05, 0xe8, 0x7c, 0x19, 0xb7,
	0x47, 0x02, 0x04, 0xf4, 0xa4, 0x73, 0xf2, 0x19,
	0x79, 0x44, 0xfd, 0x69, 0x5c, 0x37, 0x71, 0xb3,
	0x29, 0x05, 0x5b, 0x56, 0xf6, 0x2d, 0xd5, 0x50,
	0x93, 0x2c, 0x40, 0x33, 0x56, 0xb5, 0x3e, 0x90,
	0xbd, 0x03, 0x89, 0x42, 0x53, 0x05, 0x6a, 0xda,
	0xf9, 0xf4, 0x2d, 0xee, 0x89, 0x60, 0x9d, 0x73,
	0x94, 0xb3, 0xff, 0xd5, 0x7d, 0xd7, 0xef, 0xd6,
	0xdd, 0x64, 0xf7, 0x7a, 0x72, 0x89, 0xb8, 0x79,
	0xc9, 0x9e, 0x7c, 0x7e, 0xe0, 0xb4, 0x37, 0x8f,
	0x20, 0x3a, 0xe8, 0x54, 0x34, 0x42, 0x2b, 0x8f,
})

// Symmetric cipher to use for the STS encryption
var stsCipher = aes.NewCipher

// Key size for the symmetric cipher
var stsCipherBits = 128

// Hash type for the RSA signature/verification
var stsSigHash = crypto.MD5

// Hash type for the HMAC within HKDF
var hkdfHash = crypto.MD5

// Salt value for the HKDF key extraction
var hkdfSalt = []byte("iris.proto.session.hkdf.salt")

// Info value for the HKDF key expansion
var hkdfInfo = []byte("iris.proto.session.hkdf.info")

// Symmetric cipher to use for session encryption
var sesCipher = aes.NewCipher

// Key size for the session symmetric cipher
var sesCipherBits = 128

// Hash creator for the session HMAC
var sesHash = md5.New
